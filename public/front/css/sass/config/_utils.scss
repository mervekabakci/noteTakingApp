@use "sass:math";

:root {
  --white: #ffffff;
  --black: #000000;
  --primary: #335cff;
  --secondary: #525866;
  --danger: #fb3748;
  --light-bg: #e5e5e5;
  --dark-bg: #06090c;

  --gray-100: #f3f5f8;
  --gray-200: #e0e4ea;
  --gray-500: #717784;
  --gray-600: #525866;
  --gray-800:#525866;
  --gray-950: #0e121b;
}

$gutter: 1rem;

/*burada tanımlanan renkler class olarak kullanabılırız*/
$primary: var(--primary);
$secondary: var(--secondary);
$danger: var(--danger);
$light-bg: var(--light-bg);
$dark-bg: var(--dark-bg);
$white: var(--white);
$black: var(--black);
$gray-100: var(--gray-100);
$gray-200: var(--gray-200);
$gray-500: var(--gray-500);
$gray-600: var(--gray-600);
$gray-800: var(--gray-950);
$gray-950: var(--gray-950);

$colors: (
  "primary": $primary,
  "secondary": $secondary,
  "danger": $danger,
  "light-bg": $light-bg,
  "dark-bg": $dark-bg,
  "white": $white,
  "black": $black,
  "gray-100": $gray-100,
  "gray-200": $gray-200,
  "gray-500": $gray-500,
  "gray-600": $gray-600,
  "gray-800": $gray-800,
  "gray-950": $gray-950,
);

//bg-primary seklınde burada tanımlanan renklerı kullanarak bg rengını class ıle degıstırebılır
//Ayrıca bu sayede tema seceneklerı de olusturabılırız.
@mixin generate-background-classes($colors) {
  @each $name, $color in $colors {
    .bg-#{$name} {
      background-color: $color !important;
    }
  }
}

@include generate-background-classes($colors);
//backgorund class name end

//button class name start
@mixin generate-button-classes($colors) {
  @each $name, $color in $colors {
    .button {
      &-#{$name} {
        &:not(.disabled) {
          background-color: $color !important;
          border: 1px solid $color !important;
          transition: all 0.3s linear;

          @media screen and (min-width: 992px) {
            &:hover {
              color: $white !important;
              background-color: $color;
            }
          }

          @if $name == "white" {
            color: $primary !important;
          } @else {
            color: $white !important;
          }
        }

        &-outline {
          &:not(.disabled) {
            background-color: $gray-100 !important;
            color: $color !important;
            border-color: $gray-100 !important;
            @media screen and (min-width: 992px) {
              &:hover {
                @if $name == "white" {
                  color: $primary !important;
                } @else {
                  color: $white !important;
                }
              }
            }
          }
        }
      }
    }
  }
}

@include generate-button-classes($colors);
//button class name end

//container breakpoint tanımlamaları
@mixin min($bp, $max: "null", $device: "screen") {
  @if $max == "null" {
    @media only #{$device} and (min-width: #{$bp}) {
      @content;
    }
  } @else {
    @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
      @content;
    }
  }
}

@function bp($bp) {
  @return map-get($breakpoints, $bp);
}

// Breakpoint ve container genişlikleri
$breakpoints: (
  xs: 320px,
  sm: 576px,
  md: 992px,
  lg: 1200px,
  xl: 1440px,
  xxl: 1600px,
  xxxl: 1700px,
  big: 1920px,
);

// Her breakpoint için container max-width değerleri
$container-max-widths: (
  xs: 284px,
  sm: 540px,
  md: 960,
  lg: 1140px,
  xl: 1320px,
  xxl: 1440px,
  xxxl: 1640px,
  big: 1860px,
);

// Ana .container sınıfı (responsive)
.container {
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;

  // Her breakpoint'e göre max-width
  @each $breakpoint, $container-max in $container-max-widths {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      max-width: $container-max;
    }
  }
}

// Sabit genişlikli .container-{breakpoint} sınıfları
@each $breakpoint, $container-max in $container-max-widths {
  .container-#{$breakpoint} {
    width: 100%;
    max-width: $container-max;
    margin-right: auto;
    margin-left: auto;
    padding-right: 15px;
    padding-left: 15px;
  }
}

// Full genişlikli container
.container-fluid {
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: calc(-#{$gutter} / 2);
  margin-right: calc(-#{$gutter} / 2);
}

[class*="col-"] {
  padding-left: calc(#{$gutter} / 2);
  padding-right: calc(#{$gutter} / 2);

  & > * {
    width: 100%;
  }
}

//col sınıfları olusturmak ıcın
//$breakpoint bunun ıcerısınde tanımlanmıs olan px olculerını ekran olculerı olarak alır.
@mixin generate-cols($breakpoint, $min-width) {
  //1 den 12 ye kadar değer uretıyoruz burayı arttırdıkca col-1 den col-12 ye kadar gıderken bu aralıgı buradan degıstırebılırız
  @for $i from 1 through 12 {
    //burada da media query icin classlarımızı belırlıyoruz
    //col-md-576px gibi degerlerı css ıcerısınde tum belırtılen pointlerle bırlıkte olusturur ve bız bunları class olarak kullanırız.
    .col-#{$breakpoint}-#{$i} {
      width: 100%;
      flex: 0 0 100%;
      max-width: 100%;

      @media (min-width: $min-width) {
        $colWidth: math.div(100%, 12) * $i;
        width: #{$colWidth};
        flex: 0 0 #{$colWidth};
        max-width: #{$colWidth};
      }
    }
  }
}

//burada ise tum classları yukarıdaki mix yapısına gore generate eder
@each $name, $size in $breakpoints {
  @include generate-cols($name, $size);
}

$display-utils: (
  "none": none,
  "block": block,
  "inline": inline,
  "inline-block": inline-block,
  "flex": flex,
  "inline-flex": inline-flex,
  "grid": grid,
);

@mixin generate-display-classes($displays, $breakpoints) {
  // Global sınıflar: d-flex, d-block, vs.
  @each $key, $value in $displays {
    .d-#{$key} {
      display: $value !important;
    }
  }

  // Responsive sınıflar: d-md-flex, d-lg-block, vs.
  @each $bp-name, $bp-size in $breakpoints {
    @each $key, $value in $displays {
      @media (min-width: $bp-size) {
        .d-#{$bp-name}-#{$key} {
          display: $value !important;
        }
      }
    }
  }
}

@include generate-display-classes($display-utils, $breakpoints);

/*gap start*/
@for $i from 1 through 12 {
  .gap-#{$i} {
    gap: #{($i * 5)}px;
  }

  @each $bp-name, $bp-size in $breakpoints {
    @media (min-width: $bp-size) {
      .gap-#{$bp-name}-#{$i} {
        gap: #{($i * 5)}px !important;
      }
    }
  }
}

/*gap end*/

.grids {
  display: grid;

  @for $i from 1 through 12 {
    .col-span-#{$i} {
      grid-column: span $i;
    }

    .row-span-#{$i} {
      grid-row: span $i;
    }

    &.grid-columns-#{$i} {
      grid-template-columns: repeat($i, 1fr);
    }
  }
}

/*line clamp start*/
@for $i from 1 through 12 {
  .line-clamp_#{$i} {
    display: -webkit-box;
    overflow: hidden;
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    -webkit-line-clamp: $i;
  }
}

/*line clamp end*/

$spacing-scale: (
  0: 0,
  1: 0.25rem,
  2: 0.5rem,
  3: 1rem,
  4: 1.5rem,
  5: 3rem,
  auto: auto,
);
@mixin generate-spacing($property, $prefix) {
  @each $key, $value in $spacing-scale {
    .#{$prefix}t-#{$key} {
      #{$property}-top: $value;
    }
    .#{$prefix}b-#{$key} {
      #{$property}-bottom: $value;
    }
    .#{$prefix}s-#{$key} {
      #{$property}-left: $value;
    }
    .#{$prefix}e-#{$key} {
      #{$property}-right: $value;
    }
    .#{$prefix}x-#{$key} {
      #{$property}-left: $value;
      #{$property}-right: $value;
    }
    .#{$prefix}y-#{$key} {
      #{$property}-top: $value;
      #{$property}-bottom: $value;
    }
    .#{$prefix}-#{$key} {
      #{$property}: $value;
    }
  }
}
@include generate-spacing(margin, m);
@include generate-spacing(padding, p);


.h-100{
  height: 100%;
}